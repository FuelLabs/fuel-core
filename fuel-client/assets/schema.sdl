scalar Address

scalar AssetId

type Balance {
	owner: Address!
	amount: U64!
	assetId: AssetId!
}

type BalanceConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [BalanceEdge!]!
}

"""
An edge in a connection.
"""
type BalanceEdge {
	"""
	A cursor for use in pagination
	"""
	cursor: String!
	"""
	"The item at the end of the edge
	"""
	node: Balance!
}

input BalanceFilterInput {
	"""
	Filter coins based on the `owner` field
	"""
	owner: Address!
}

type Block {
	id: BlockId!
	height: U64!
	transactions: [Transaction!]!
	time: DateTime!
	producer: Address!
}

type BlockConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [BlockEdge!]!
}

"""
An edge in a connection.
"""
type BlockEdge {
	"""
	A cursor for use in pagination
	"""
	cursor: String!
	"""
	"The item at the end of the edge
	"""
	node: Block!
}

scalar BlockId


input Breakpoint {
	contract: ContractId!
	pc: U64!
}

scalar Bytes32

type ChainInfo {
	name: String!
	latestBlock: Block!
	baseChainHeight: U64!
	peerCount: Int!
}

type ChangeOutput {
	to: Address!
	amount: U64!
	assetId: AssetId!
}

type Coin {
	utxoId: UtxoId!
	owner: Address!
	amount: U64!
	assetId: AssetId!
	maturity: U64!
	status: CoinStatus!
	blockCreated: U64!
}

type CoinConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [CoinEdge!]!
}

"""
An edge in a connection.
"""
type CoinEdge {
	"""
	A cursor for use in pagination
	"""
	cursor: String!
	"""
	"The item at the end of the edge
	"""
	node: Coin!
}

input CoinFilterInput {
	"""
	Address of the owner
	"""
	owner: Address!
	"""
	Asset ID of the coins
	"""
	assetId: AssetId
}

type CoinOutput {
	to: Address!
	amount: U64!
	assetId: AssetId!
}

enum CoinStatus {
	UNSPENT
	SPENT
}

type Contract {
	id: ContractId!
	bytecode: HexString!
	salt: Salt!
}

type ContractBalance {
	contract: ContractId!
	amount: U64!
	assetId: AssetId!
}

type ContractCreated {
	contract: Contract!
	stateRoot: Bytes32!
}

scalar ContractId

type ContractOutput {
	inputIndex: Int!
	balanceRoot: Bytes32!
	stateRoot: Bytes32!
}

"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime

type FailureStatus {
	block: Block!
	time: DateTime!
	reason: String!
	programState: ProgramState
}


scalar HexString


union Input = | InputCoin | InputContract

type InputCoin {
	utxoId: UtxoId!
	owner: Address!
	amount: U64!
	assetId: AssetId!
	witnessIndex: Int!
	maturity: U64!
	predicate: HexString!
	predicateData: HexString!
}

type InputContract {
	utxoId: UtxoId!
	balanceRoot: Bytes32!
	stateRoot: Bytes32!
	contract: Contract!
}


type Mutation {
	startSession: ID!
	endSession(id: ID!): Boolean!
	reset(id: ID!): Boolean!
	execute(id: ID!, op: String!): Boolean!
	setSingleStepping(id: ID!, enable: Boolean!): Boolean!
	setBreakpoint(id: ID!, breakpoint: Breakpoint!): Boolean!
	startTx(id: ID!, txJson: String!): RunResult!
	continueTx(id: ID!): RunResult!
	"""
	Execute a dry-run of the transaction using a fork of current state, no changes are committed.
	"""
	dryRun(tx: HexString!, utxoValidation: Boolean): [Receipt!]!
	"""
	Submits transaction to the txpool
	"""
	submit(tx: HexString!): Transaction!
}

type NodeInfo {
	utxoValidation: Boolean!
	predicates: Boolean!
	vmBacktrace: Boolean!
	minGasPrice: U64!
	minBytePrice: U64!
	maxTx: U64!
	maxDepth: U64!
	nodeVersion: String!
}

union Output = | CoinOutput | ContractOutput | WithdrawalOutput | ChangeOutput | VariableOutput | ContractCreated

"""
A separate `Breakpoint` type to be used as an output, as a single
type cannot act as both input and output type in async-graphql
"""
type OutputBreakpoint {
	contract: ContractId!
	pc: U64!
}

"""
Information about pagination in a connection
"""
type PageInfo {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}

type ProgramState {
	returnType: ReturnType!
	data: HexString!
}

type Query {
	register(id: ID!, register: U64!): U64!
	memory(id: ID!, start: U64!, size: U64!): String!
	balance(owner: Address!, assetId: AssetId!): Balance!
	balances(filter: BalanceFilterInput!, first: Int, after: String, last: Int, before: String): BalanceConnection!
	block(id: BlockId, height: U64): Block
	blocks(first: Int, after: String, last: Int, before: String): BlockConnection!
	chain: ChainInfo!
	transaction(id: TransactionId!): Transaction
	transactions(first: Int, after: String, last: Int, before: String): TransactionConnection!
	transactionsByOwner(owner: Address!, first: Int, after: String, last: Int, before: String): TransactionConnection!
	"""
	Returns true when the GraphQL API is serving requests.
	"""
	health: Boolean!
	coin(utxoId: UtxoId!): Coin
	coins(filter: CoinFilterInput!, first: Int, after: String, last: Int, before: String): CoinConnection!
	"""
	For each `spend_query`, get some spendable coins (of asset specified by the query) owned by
	`owner` that add up at least the query amount. The returned coins (UTXOs) are actual coins
	that can be spent. The number of coins (UXTOs) is optimized to prevent dust accumulation.
	Max number of UTXOS and excluded UTXOS can also be specified.
	"""
	coinsToSpend(owner: Address!, spendQuery: [SpendQueryElementInput!]!, maxInputs: Int, excludedIds: [UtxoId!]): [Coin!]!
	contract(id: ContractId!): Contract
	contractBalance(contract: ContractId!, asset: AssetId!): ContractBalance!
	nodeInfo: NodeInfo!
}

type Receipt {
	contract: Contract
	pc: U64
	is: U64
	to: Contract
	toAddress: Address
	amount: U64
	assetId: AssetId
	gas: U64
	param1: U64
	param2: U64
	val: U64
	ptr: U64
	digest: Bytes32
	reason: U64
	ra: U64
	rb: U64
	rc: U64
	rd: U64
	len: U64
	receiptType: ReceiptType!
	rawPayload: HexString!
	result: U64
	gasUsed: U64
	data: HexString
}

enum ReceiptType {
	CALL
	RETURN
	RETURN_DATA
	PANIC
	REVERT
	LOG
	LOG_DATA
	TRANSFER
	TRANSFER_OUT
	SCRIPT_RESULT
}

enum ReturnType {
	RETURN
	RETURN_DATA
	REVERT
}

type RunResult {
	state: RunState!
	breakpoint: OutputBreakpoint
}

enum RunState {
	COMPLETED
	BREAKPOINT
}

scalar Salt

input SpendQueryElementInput {
	"""
	Asset ID of the coins
	"""
	assetId: AssetId!
	"""
	Target amount for the query
	"""
	amount: U64!
}


type SubmittedStatus {
	time: DateTime!
}

type SuccessStatus {
	block: Block!
	time: DateTime!
	programState: ProgramState!
}

type Transaction {
	id: TransactionId!
	inputAssetIds: [AssetId!]!
	inputContracts: [Contract!]!
	gasPrice: U64!
	gasLimit: U64!
	bytePrice: U64!
	maturity: U64!
	isScript: Boolean!
	inputs: [Input!]!
	outputs: [Output!]!
	witnesses: [HexString!]!
	receiptsRoot: Bytes32
	status: TransactionStatus
	receipts: [Receipt!]
	script: HexString
	scriptData: HexString
	bytecodeWitnessIndex: Int
	bytecodeLength: U64
	salt: Salt
	staticContracts: [Contract!]
	storageSlots: [HexString!]
	"""
	Return the transaction bytes using canonical encoding
	"""
	rawPayload: HexString!
}

type TransactionConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [TransactionEdge!]!
}

"""
An edge in a connection.
"""
type TransactionEdge {
	"""
	A cursor for use in pagination
	"""
	cursor: String!
	"""
	"The item at the end of the edge
	"""
	node: Transaction!
}

scalar TransactionId

union TransactionStatus = | SubmittedStatus | SuccessStatus | FailureStatus

scalar U64

scalar UtxoId

type VariableOutput {
	to: Address!
	amount: U64!
	assetId: AssetId!
}

type WithdrawalOutput {
	to: Address!
	amount: U64!
	assetId: AssetId!
}

schema {
	query: Query
	mutation: Mutation
}
